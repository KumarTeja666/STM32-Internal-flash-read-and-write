
Flash_Memory_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002758  08002758  00003758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002788  08002788  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  08002788  08002788  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002788  08002788  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002788  08002788  00003788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800278c  0800278c  0000378c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002790  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004014  2**0
                  CONTENTS
 10 .bss          00000090  20000018  20000018  00004018  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  00004018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000096e4  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190e  00000000  00000000  0000d728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0000f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007e9  00000000  00000000  0000fa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f39e  00000000  00000000  00010261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb47  00000000  00000000  0002f5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c16c9  00000000  00000000  0003b146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fc80f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a7c  00000000  00000000  000fc854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000ff2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002740 	.word	0x08002740

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08002740 	.word	0x08002740

080001d4 <Erase_Page>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Erase_Page(uint32_t PageAddress,uint8_t Pages)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	460b      	mov	r3, r1
 80001de:	70fb      	strb	r3, [r7, #3]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t page_err;

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.PageAddress = PageAddress;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	613b      	str	r3, [r7, #16]
	EraseInitStruct.NbPages = Pages;
 80001e8:	78fb      	ldrb	r3, [r7, #3]
 80001ea:	617b      	str	r3, [r7, #20]

	HAL_FLASHEx_Erase(&EraseInitStruct, &page_err);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	f107 030c 	add.w	r3, r7, #12
 80001f4:	4611      	mov	r1, r2
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fc68 	bl	8000acc <HAL_FLASHEx_Erase>
}
 80001fc:	bf00      	nop
 80001fe:	3718      	adds	r7, #24
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b5b0      	push	{r4, r5, r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020a:	f000 f9b3 	bl	8000574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800020e:	f000 f83b 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000212:	f000 f8b3 	bl	800037c <MX_GPIO_Init>
  MX_TIM6_Init();
 8000216:	f000 f87b 	bl	8000310 <MX_TIM6_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 800021a:	4817      	ldr	r0, [pc, #92]	@ (8000278 <main+0x74>)
 800021c:	f001 ff76 	bl	800210c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */


  counter=0;
 8000220:	4b16      	ldr	r3, [pc, #88]	@ (800027c <main+0x78>)
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
  HAL_FLASH_Unlock();
 8000226:	f000 fb8d 	bl	8000944 <HAL_FLASH_Unlock>
  Erase_Page(Address,1);
 800022a:	4b15      	ldr	r3, [pc, #84]	@ (8000280 <main+0x7c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	2101      	movs	r1, #1
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ffcf 	bl	80001d4 <Erase_Page>
  for(int i=0;i<256;i++)
 8000236:	2300      	movs	r3, #0
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	e015      	b.n	8000268 <main+0x64>
  {
	  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, buffer+i);
 800023c:	4b10      	ldr	r3, [pc, #64]	@ (8000280 <main+0x7c>)
 800023e:	6819      	ldr	r1, [r3, #0]
 8000240:	4b10      	ldr	r3, [pc, #64]	@ (8000284 <main+0x80>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4413      	add	r3, r2
 8000248:	2200      	movs	r2, #0
 800024a:	461c      	mov	r4, r3
 800024c:	4615      	mov	r5, r2
 800024e:	4622      	mov	r2, r4
 8000250:	462b      	mov	r3, r5
 8000252:	2002      	movs	r0, #2
 8000254:	f000 fb06 	bl	8000864 <HAL_FLASH_Program>
	  Address=Address+4;
 8000258:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <main+0x7c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	3304      	adds	r3, #4
 800025e:	4a08      	ldr	r2, [pc, #32]	@ (8000280 <main+0x7c>)
 8000260:	6013      	str	r3, [r2, #0]
  for(int i=0;i<256;i++)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3301      	adds	r3, #1
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2bff      	cmp	r3, #255	@ 0xff
 800026c:	dde6      	ble.n	800023c <main+0x38>
  }
  HAL_FLASH_Lock();
 800026e:	f000 fb8f 	bl	8000990 <HAL_FLASH_Lock>
 // ReadData[1]=*(uint32_t *)(Address+4);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000272:	bf00      	nop
 8000274:	e7fd      	b.n	8000272 <main+0x6e>
 8000276:	bf00      	nop
 8000278:	20000034 	.word	0x20000034
 800027c:	20000080 	.word	0x20000080
 8000280:	20000000 	.word	0x20000000
 8000284:	20000004 	.word	0x20000004

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b090      	sub	sp, #64	@ 0x40
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2228      	movs	r2, #40	@ 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fa26 	bl	80026e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002aa:	2302      	movs	r3, #2
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ae:	2301      	movs	r3, #1
 80002b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b2:	2310      	movs	r3, #16
 80002b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b6:	2302      	movs	r3, #2
 80002b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fca0 	bl	8000c14 <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002da:	f000 f885 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	2302      	movs	r3, #2
 80002e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2102      	movs	r1, #2
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fcdf 	bl	8001cbc <HAL_RCC_ClockConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000304:	f000 f870 	bl	80003e8 <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3740      	adds	r7, #64	@ 0x40
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000320:	4b14      	ldr	r3, [pc, #80]	@ (8000374 <MX_TIM6_Init+0x64>)
 8000322:	4a15      	ldr	r2, [pc, #84]	@ (8000378 <MX_TIM6_Init+0x68>)
 8000324:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000326:	4b13      	ldr	r3, [pc, #76]	@ (8000374 <MX_TIM6_Init+0x64>)
 8000328:	2247      	movs	r2, #71	@ 0x47
 800032a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032c:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_TIM6_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000332:	4b10      	ldr	r3, [pc, #64]	@ (8000374 <MX_TIM6_Init+0x64>)
 8000334:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000338:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_TIM6_Init+0x64>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000340:	480c      	ldr	r0, [pc, #48]	@ (8000374 <MX_TIM6_Init+0x64>)
 8000342:	f001 fe8b 	bl	800205c <HAL_TIM_Base_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800034c:	f000 f84c 	bl	80003e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	4619      	mov	r1, r3
 800035c:	4805      	ldr	r0, [pc, #20]	@ (8000374 <MX_TIM6_Init+0x64>)
 800035e:	f002 f919 	bl	8002594 <HAL_TIMEx_MasterConfigSynchronization>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000368:	f000 f83e 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800036c:	bf00      	nop
 800036e:	3710      	adds	r7, #16
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000034 	.word	0x20000034
 8000378:	40001000 	.word	0x40001000

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_GPIO_Init+0x44>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a0e      	ldr	r2, [pc, #56]	@ (80003c0 <MX_GPIO_Init+0x44>)
 8000388:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b0c      	ldr	r3, [pc, #48]	@ (80003c0 <MX_GPIO_Init+0x44>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800039a:	4b09      	ldr	r3, [pc, #36]	@ (80003c0 <MX_GPIO_Init+0x44>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a08      	ldr	r2, [pc, #32]	@ (80003c0 <MX_GPIO_Init+0x44>)
 80003a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <MX_GPIO_Init+0x44>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	counter++;
 80003cc:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a04      	ldr	r2, [pc, #16]	@ (80003e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003d4:	6013      	str	r3, [r2, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	20000080 	.word	0x20000080

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <Error_Handler+0x8>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <HAL_MspInit+0x44>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000438 <HAL_MspInit+0x44>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <HAL_MspInit+0x44>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <HAL_MspInit+0x44>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a08      	ldr	r2, [pc, #32]	@ (8000438 <HAL_MspInit+0x44>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <HAL_MspInit+0x44>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800042a:	2007      	movs	r0, #7
 800042c:	f000 f9d8 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40021000 	.word	0x40021000

0800043c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0d      	ldr	r2, [pc, #52]	@ (8000480 <HAL_TIM_Base_MspInit+0x44>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d113      	bne.n	8000476 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800044e:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <HAL_TIM_Base_MspInit+0x48>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	4a0c      	ldr	r2, [pc, #48]	@ (8000484 <HAL_TIM_Base_MspInit+0x48>)
 8000454:	f043 0310 	orr.w	r3, r3, #16
 8000458:	61d3      	str	r3, [r2, #28]
 800045a:	4b0a      	ldr	r3, [pc, #40]	@ (8000484 <HAL_TIM_Base_MspInit+0x48>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	f003 0310 	and.w	r3, r3, #16
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	2036      	movs	r0, #54	@ 0x36
 800046c:	f000 f9c3 	bl	80007f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000470:	2036      	movs	r0, #54	@ 0x36
 8000472:	f000 f9dc 	bl	800082e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000476:	bf00      	nop
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40001000 	.word	0x40001000
 8000484:	40021000 	.word	0x40021000

08000488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <NMI_Handler+0x4>

08000490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <MemManage_Handler+0x4>

080004a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <BusFault_Handler+0x4>

080004a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <UsageFault_Handler+0x4>

080004b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr

080004da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004de:	f000 f88f 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80004ec:	4802      	ldr	r0, [pc, #8]	@ (80004f8 <TIM6_DAC_IRQHandler+0x10>)
 80004ee:	f001 fe7d 	bl	80021ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	20000034 	.word	0x20000034

080004fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <SystemInit+0x20>)
 8000502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000506:	4a05      	ldr	r2, [pc, #20]	@ (800051c <SystemInit+0x20>)
 8000508:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800050c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000520:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000558 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000524:	f7ff ffea 	bl	80004fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480c      	ldr	r0, [pc, #48]	@ (800055c <LoopForever+0x6>)
  ldr r1, =_edata
 800052a:	490d      	ldr	r1, [pc, #52]	@ (8000560 <LoopForever+0xa>)
  ldr r2, =_sidata
 800052c:	4a0d      	ldr	r2, [pc, #52]	@ (8000564 <LoopForever+0xe>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a0a      	ldr	r2, [pc, #40]	@ (8000568 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000540:	4c0a      	ldr	r4, [pc, #40]	@ (800056c <LoopForever+0x16>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054e:	f002 f8d3 	bl	80026f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000552:	f7ff fe57 	bl	8000204 <main>

08000556 <LoopForever>:

LoopForever:
    b LoopForever
 8000556:	e7fe      	b.n	8000556 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000558:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800055c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000560:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000564:	08002790 	.word	0x08002790
  ldr r2, =_sbss
 8000568:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800056c:	200000a8 	.word	0x200000a8

08000570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <ADC1_2_IRQHandler>
	...

08000574 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000578:	4b08      	ldr	r3, [pc, #32]	@ (800059c <HAL_Init+0x28>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a07      	ldr	r2, [pc, #28]	@ (800059c <HAL_Init+0x28>)
 800057e:	f043 0310 	orr.w	r3, r3, #16
 8000582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000584:	2003      	movs	r0, #3
 8000586:	f000 f92b 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800058a:	2000      	movs	r0, #0
 800058c:	f000 f808 	bl	80005a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000590:	f7ff ff30 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40022000 	.word	0x40022000

080005a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	4b12      	ldr	r3, [pc, #72]	@ (80005f4 <HAL_InitTick+0x54>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <HAL_InitTick+0x58>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f943 	bl	800084a <HAL_SYSTICK_Config>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e00e      	b.n	80005ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b0f      	cmp	r3, #15
 80005d2:	d80a      	bhi.n	80005ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	2200      	movs	r2, #0
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f000 f90b 	bl	80007f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <HAL_InitTick+0x5c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e000      	b.n	80005ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000010 	.word	0x20000010
 80005fc:	2000000c 	.word	0x2000000c

08000600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <HAL_IncTick+0x20>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <HAL_IncTick+0x24>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <HAL_IncTick+0x24>)
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000010 	.word	0x20000010
 8000624:	20000084 	.word	0x20000084

08000628 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return uwTick;  
 800062c:	4b03      	ldr	r3, [pc, #12]	@ (800063c <HAL_GetTick+0x14>)
 800062e:	681b      	ldr	r3, [r3, #0]
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	20000084 	.word	0x20000084

08000640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000668:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800066c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000672:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	60d3      	str	r3, [r2, #12]
}
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b04      	ldr	r3, [pc, #16]	@ (80006a0 <__NVIC_GetPriorityGrouping+0x18>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0307 	and.w	r3, r3, #7
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4907      	ldr	r1, [pc, #28]	@ (80006dc <__NVIC_EnableIRQ+0x38>)
 80006be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	@ (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	@ (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	@ 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	@ 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007ac:	d301      	bcc.n	80007b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00f      	b.n	80007d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b2:	4a0a      	ldr	r2, [pc, #40]	@ (80007dc <SysTick_Config+0x40>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ba:	210f      	movs	r1, #15
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	f7ff ff8e 	bl	80006e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c4:	4b05      	ldr	r3, [pc, #20]	@ (80007dc <SysTick_Config+0x40>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ca:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <SysTick_Config+0x40>)
 80007cc:	2207      	movs	r2, #7
 80007ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010

080007e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff29 	bl	8000640 <__NVIC_SetPriorityGrouping>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000808:	f7ff ff3e 	bl	8000688 <__NVIC_GetPriorityGrouping>
 800080c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	6978      	ldr	r0, [r7, #20]
 8000814:	f7ff ff8e 	bl	8000734 <NVIC_EncodePriority>
 8000818:	4602      	mov	r2, r0
 800081a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff ff5d 	bl	80006e0 <__NVIC_SetPriority>
}
 8000826:	bf00      	nop
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ff31 	bl	80006a4 <__NVIC_EnableIRQ>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffa2 	bl	800079c <SysTick_Config>
 8000858:	4603      	mov	r3, r0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8000876:	2300      	movs	r3, #0
 8000878:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 800087a:	2300      	movs	r3, #0
 800087c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800087e:	4b2f      	ldr	r3, [pc, #188]	@ (800093c <HAL_FLASH_Program+0xd8>)
 8000880:	7e1b      	ldrb	r3, [r3, #24]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d101      	bne.n	800088a <HAL_FLASH_Program+0x26>
 8000886:	2302      	movs	r3, #2
 8000888:	e054      	b.n	8000934 <HAL_FLASH_Program+0xd0>
 800088a:	4b2c      	ldr	r3, [pc, #176]	@ (800093c <HAL_FLASH_Program+0xd8>)
 800088c:	2201      	movs	r2, #1
 800088e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000890:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000894:	f000 f8a8 	bl	80009e8 <FLASH_WaitForLastOperation>
 8000898:	4603      	mov	r3, r0
 800089a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800089c:	7dfb      	ldrb	r3, [r7, #23]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d144      	bne.n	800092c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d102      	bne.n	80008ae <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80008a8:	2301      	movs	r3, #1
 80008aa:	757b      	strb	r3, [r7, #21]
 80008ac:	e007      	b.n	80008be <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d102      	bne.n	80008ba <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80008b4:	2302      	movs	r3, #2
 80008b6:	757b      	strb	r3, [r7, #21]
 80008b8:	e001      	b.n	80008be <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80008ba:	2304      	movs	r3, #4
 80008bc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80008be:	2300      	movs	r3, #0
 80008c0:	75bb      	strb	r3, [r7, #22]
 80008c2:	e02d      	b.n	8000920 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80008c4:	7dbb      	ldrb	r3, [r7, #22]
 80008c6:	005a      	lsls	r2, r3, #1
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	eb02 0c03 	add.w	ip, r2, r3
 80008ce:	7dbb      	ldrb	r3, [r7, #22]
 80008d0:	0119      	lsls	r1, r3, #4
 80008d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80008d6:	f1c1 0620 	rsb	r6, r1, #32
 80008da:	f1a1 0020 	sub.w	r0, r1, #32
 80008de:	fa22 f401 	lsr.w	r4, r2, r1
 80008e2:	fa03 f606 	lsl.w	r6, r3, r6
 80008e6:	4334      	orrs	r4, r6
 80008e8:	fa23 f000 	lsr.w	r0, r3, r0
 80008ec:	4304      	orrs	r4, r0
 80008ee:	fa23 f501 	lsr.w	r5, r3, r1
 80008f2:	b2a3      	uxth	r3, r4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4660      	mov	r0, ip
 80008f8:	f000 f85a 	bl	80009b0 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80008fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000900:	f000 f872 	bl	80009e8 <FLASH_WaitForLastOperation>
 8000904:	4603      	mov	r3, r0
 8000906:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000908:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <HAL_FLASH_Program+0xdc>)
 800090a:	691b      	ldr	r3, [r3, #16]
 800090c:	4a0c      	ldr	r2, [pc, #48]	@ (8000940 <HAL_FLASH_Program+0xdc>)
 800090e:	f023 0301 	bic.w	r3, r3, #1
 8000912:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d107      	bne.n	800092a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800091a:	7dbb      	ldrb	r3, [r7, #22]
 800091c:	3301      	adds	r3, #1
 800091e:	75bb      	strb	r3, [r7, #22]
 8000920:	7dba      	ldrb	r2, [r7, #22]
 8000922:	7d7b      	ldrb	r3, [r7, #21]
 8000924:	429a      	cmp	r2, r3
 8000926:	d3cd      	bcc.n	80008c4 <HAL_FLASH_Program+0x60>
 8000928:	e000      	b.n	800092c <HAL_FLASH_Program+0xc8>
      {
        break;
 800092a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800092c:	4b03      	ldr	r3, [pc, #12]	@ (800093c <HAL_FLASH_Program+0xd8>)
 800092e:	2200      	movs	r2, #0
 8000930:	761a      	strb	r2, [r3, #24]

  return status;
 8000932:	7dfb      	ldrb	r3, [r7, #23]
}
 8000934:	4618      	mov	r0, r3
 8000936:	371c      	adds	r7, #28
 8000938:	46bd      	mov	sp, r7
 800093a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800093c:	20000088 	.word	0x20000088
 8000940:	40022000 	.word	0x40022000

08000944 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_FLASH_Unlock+0x40>)
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00d      	beq.n	8000976 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <HAL_FLASH_Unlock+0x40>)
 800095c:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <HAL_FLASH_Unlock+0x44>)
 800095e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000960:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <HAL_FLASH_Unlock+0x40>)
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <HAL_FLASH_Unlock+0x48>)
 8000964:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000966:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <HAL_FLASH_Unlock+0x40>)
 8000968:	691b      	ldr	r3, [r3, #16]
 800096a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000976:	79fb      	ldrb	r3, [r7, #7]
}
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	40022000 	.word	0x40022000
 8000988:	45670123 	.word	0x45670123
 800098c:	cdef89ab 	.word	0xcdef89ab

08000990 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_FLASH_Lock+0x1c>)
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	4a04      	ldr	r2, [pc, #16]	@ (80009ac <HAL_FLASH_Lock+0x1c>)
 800099a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	40022000 	.word	0x40022000

080009b0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <FLASH_Program_HalfWord+0x30>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <FLASH_Program_HalfWord+0x34>)
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	4a07      	ldr	r2, [pc, #28]	@ (80009e4 <FLASH_Program_HalfWord+0x34>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	887a      	ldrh	r2, [r7, #2]
 80009d2:	801a      	strh	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000088 	.word	0x20000088
 80009e4:	40022000 	.word	0x40022000

080009e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80009f0:	f7ff fe1a 	bl	8000628 <HAL_GetTick>
 80009f4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80009f6:	e010      	b.n	8000a1a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fe:	d00c      	beq.n	8000a1a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d007      	beq.n	8000a16 <FLASH_WaitForLastOperation+0x2e>
 8000a06:	f7ff fe0f 	bl	8000628 <HAL_GetTick>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d201      	bcs.n	8000a1a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000a16:	2303      	movs	r3, #3
 8000a18:	e01f      	b.n	8000a5a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000a1a:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <FLASH_WaitForLastOperation+0x7c>)
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d0e8      	beq.n	80009f8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000a26:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <FLASH_WaitForLastOperation+0x7c>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	f003 0320 	and.w	r3, r3, #32
 8000a2e:	2b20      	cmp	r3, #32
 8000a30:	d102      	bne.n	8000a38 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000a32:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <FLASH_WaitForLastOperation+0x7c>)
 8000a34:	2220      	movs	r2, #32
 8000a36:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a38:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <FLASH_WaitForLastOperation+0x7c>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	f003 0310 	and.w	r3, r3, #16
 8000a40:	2b10      	cmp	r3, #16
 8000a42:	d005      	beq.n	8000a50 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a44:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <FLASH_WaitForLastOperation+0x7c>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d103      	bne.n	8000a58 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000a50:	f000 f80a 	bl	8000a68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e000      	b.n	8000a5a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40022000 	.word	0x40022000

08000a68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000a72:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <FLASH_SetErrorCode+0x5c>)
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	d109      	bne.n	8000a92 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000a7e:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <FLASH_SetErrorCode+0x60>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	4a10      	ldr	r2, [pc, #64]	@ (8000ac8 <FLASH_SetErrorCode+0x60>)
 8000a88:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <FLASH_SetErrorCode+0x5c>)
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d109      	bne.n	8000ab2 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <FLASH_SetErrorCode+0x60>)
 8000aa0:	69db      	ldr	r3, [r3, #28]
 8000aa2:	f043 0301 	orr.w	r3, r3, #1
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <FLASH_SetErrorCode+0x60>)
 8000aa8:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <FLASH_SetErrorCode+0x5c>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	60d3      	str	r3, [r2, #12]
}  
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40022000 	.word	0x40022000
 8000ac8:	20000088 	.word	0x20000088

08000acc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000ade:	4b2e      	ldr	r3, [pc, #184]	@ (8000b98 <HAL_FLASHEx_Erase+0xcc>)
 8000ae0:	7e1b      	ldrb	r3, [r3, #24]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d101      	bne.n	8000aea <HAL_FLASHEx_Erase+0x1e>
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	e052      	b.n	8000b90 <HAL_FLASHEx_Erase+0xc4>
 8000aea:	4b2b      	ldr	r3, [pc, #172]	@ (8000b98 <HAL_FLASHEx_Erase+0xcc>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d115      	bne.n	8000b24 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000af8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000afc:	f7ff ff74 	bl	80009e8 <FLASH_WaitForLastOperation>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d140      	bne.n	8000b88 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000b06:	f000 f84b 	bl	8000ba0 <FLASH_MassErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b0a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000b0e:	f7ff ff6b 	bl	80009e8 <FLASH_WaitForLastOperation>
 8000b12:	4603      	mov	r3, r0
 8000b14:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <HAL_FLASHEx_Erase+0xd0>)
 8000b18:	691b      	ldr	r3, [r3, #16]
 8000b1a:	4a20      	ldr	r2, [pc, #128]	@ (8000b9c <HAL_FLASHEx_Erase+0xd0>)
 8000b1c:	f023 0304 	bic.w	r3, r3, #4
 8000b20:	6113      	str	r3, [r2, #16]
 8000b22:	e031      	b.n	8000b88 <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000b24:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000b28:	f7ff ff5e 	bl	80009e8 <FLASH_WaitForLastOperation>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d12a      	bne.n	8000b88 <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	f04f 32ff 	mov.w	r2, #4294967295
 8000b38:	601a      	str	r2, [r3, #0]

        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	e019      	b.n	8000b76 <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000b42:	68b8      	ldr	r0, [r7, #8]
 8000b44:	f000 f846 	bl	8000bd4 <FLASH_PageErase>

          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b48:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000b4c:	f7ff ff4c 	bl	80009e8 <FLASH_WaitForLastOperation>
 8000b50:	4603      	mov	r3, r0
 8000b52:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_FLASHEx_Erase+0xd0>)
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <HAL_FLASHEx_Erase+0xd0>)
 8000b5a:	f023 0302 	bic.w	r3, r3, #2
 8000b5e:	6113      	str	r3, [r2, #16]

          if (status != HAL_OK)
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	601a      	str	r2, [r3, #0]
            break;
 8000b6c:	e00c      	b.n	8000b88 <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b74:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	02da      	lsls	r2, r3, #11
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d3dc      	bcc.n	8000b42 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_FLASHEx_Erase+0xcc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	761a      	strb	r2, [r3, #24]

  return status;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000088 	.word	0x20000088
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ba4:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <FLASH_MassErase+0x2c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <FLASH_MassErase+0x30>)
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <FLASH_MassErase+0x30>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <FLASH_MassErase+0x30>)
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <FLASH_MassErase+0x30>)
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc0:	6113      	str	r3, [r2, #16]
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	20000088 	.word	0x20000088
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series
  *
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <FLASH_PageErase+0x38>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <FLASH_PageErase+0x3c>)
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <FLASH_PageErase+0x3c>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <FLASH_PageErase+0x3c>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <FLASH_PageErase+0x3c>)
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	4a05      	ldr	r2, [pc, #20]	@ (8000c10 <FLASH_PageErase+0x3c>)
 8000bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bfe:	6113      	str	r3, [r2, #16]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	20000088 	.word	0x20000088
 8000c10:	40022000 	.word	0x40022000

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c2a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	f001 b83a 	b.w	8001cae <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000c3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 816f 	beq.w	8000f2e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c50:	4bb5      	ldr	r3, [pc, #724]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 030c 	and.w	r3, r3, #12
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d00c      	beq.n	8000c76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c5c:	4bb2      	ldr	r3, [pc, #712]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 030c 	and.w	r3, r3, #12
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d15c      	bne.n	8000d22 <HAL_RCC_OscConfig+0x10e>
 8000c68:	4baf      	ldr	r3, [pc, #700]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c74:	d155      	bne.n	8000d22 <HAL_RCC_OscConfig+0x10e>
 8000c76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c7a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000c82:	fa93 f3a3 	rbit	r3, r3
 8000c86:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c8a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8e:	fab3 f383 	clz	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	095b      	lsrs	r3, r3, #5
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d102      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x94>
 8000ca2:	4ba1      	ldr	r3, [pc, #644]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	e015      	b.n	8000cd4 <HAL_RCC_OscConfig+0xc0>
 8000ca8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cac:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000cb4:	fa93 f3a3 	rbit	r3, r3
 8000cb8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000cbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cc0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000cc4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000cc8:	fa93 f3a3 	rbit	r3, r3
 8000ccc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000cd0:	4b95      	ldr	r3, [pc, #596]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000cd8:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000cdc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000ce0:	fa92 f2a2 	rbit	r2, r2
 8000ce4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000ce8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	f042 0220 	orr.w	r2, r2, #32
 8000cf6:	b2d2      	uxtb	r2, r2
 8000cf8:	f002 021f 	and.w	r2, r2, #31
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8111 	beq.w	8000f2c <HAL_RCC_OscConfig+0x318>
 8000d0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d0e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f040 8108 	bne.w	8000f2c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f000 bfc6 	b.w	8001cae <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d32:	d106      	bne.n	8000d42 <HAL_RCC_OscConfig+0x12e>
 8000d34:	4b7c      	ldr	r3, [pc, #496]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a7b      	ldr	r2, [pc, #492]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e036      	b.n	8000db0 <HAL_RCC_OscConfig+0x19c>
 8000d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x158>
 8000d52:	4b75      	ldr	r3, [pc, #468]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a74      	ldr	r2, [pc, #464]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	4b72      	ldr	r3, [pc, #456]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a71      	ldr	r2, [pc, #452]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e021      	b.n	8000db0 <HAL_RCC_OscConfig+0x19c>
 8000d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d7c:	d10c      	bne.n	8000d98 <HAL_RCC_OscConfig+0x184>
 8000d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a69      	ldr	r2, [pc, #420]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	4b67      	ldr	r3, [pc, #412]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a66      	ldr	r2, [pc, #408]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e00b      	b.n	8000db0 <HAL_RCC_OscConfig+0x19c>
 8000d98:	4b63      	ldr	r3, [pc, #396]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a62      	ldr	r2, [pc, #392]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4b60      	ldr	r3, [pc, #384]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a5f      	ldr	r2, [pc, #380]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dae:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000db4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d059      	beq.n	8000e74 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fc32 	bl	8000628 <HAL_GetTick>
 8000dc4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc8:	e00a      	b.n	8000de0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dca:	f7ff fc2d 	bl	8000628 <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	@ 0x64
 8000dd8:	d902      	bls.n	8000de0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	f000 bf67 	b.w	8001cae <HAL_RCC_OscConfig+0x109a>
 8000de0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000de4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8000df4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df8:	fab3 f383 	clz	r3, r3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d102      	bne.n	8000e12 <HAL_RCC_OscConfig+0x1fe>
 8000e0c:	4b46      	ldr	r3, [pc, #280]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	e015      	b.n	8000e3e <HAL_RCC_OscConfig+0x22a>
 8000e12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e16:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000e1e:	fa93 f3a3 	rbit	r3, r3
 8000e22:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000e26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e2a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000e2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000e32:	fa93 f3a3 	rbit	r3, r3
 8000e36:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e42:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8000e46:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000e4a:	fa92 f2a2 	rbit	r2, r2
 8000e4e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8000e52:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000e56:	fab2 f282 	clz	r2, r2
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	f042 0220 	orr.w	r2, r2, #32
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	f002 021f 	and.w	r2, r2, #31
 8000e66:	2101      	movs	r1, #1
 8000e68:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0ab      	beq.n	8000dca <HAL_RCC_OscConfig+0x1b6>
 8000e72:	e05c      	b.n	8000f2e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fbd8 	bl	8000628 <HAL_GetTick>
 8000e78:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7c:	e00a      	b.n	8000e94 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fbd3 	bl	8000628 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	@ 0x64
 8000e8c:	d902      	bls.n	8000e94 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	f000 bf0d 	b.w	8001cae <HAL_RCC_OscConfig+0x109a>
 8000e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e98:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8000ea8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d102      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x2b2>
 8000ec0:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	e015      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2de>
 8000ec6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eca:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000eda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ede:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000ee2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <HAL_RCC_OscConfig+0x314>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ef6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8000efa:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8000efe:	fa92 f2a2 	rbit	r2, r2
 8000f02:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8000f06:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000f0a:	fab2 f282 	clz	r2, r2
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	f042 0220 	orr.w	r2, r2, #32
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	f002 021f 	and.w	r2, r2, #31
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1ab      	bne.n	8000e7e <HAL_RCC_OscConfig+0x26a>
 8000f26:	e002      	b.n	8000f2e <HAL_RCC_OscConfig+0x31a>
 8000f28:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 817f 	beq.w	8001242 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f44:	4ba7      	ldr	r3, [pc, #668]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00c      	beq.n	8000f6a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f50:	4ba4      	ldr	r3, [pc, #656]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d173      	bne.n	8001044 <HAL_RCC_OscConfig+0x430>
 8000f5c:	4ba1      	ldr	r3, [pc, #644]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f68:	d16c      	bne.n	8001044 <HAL_RCC_OscConfig+0x430>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f70:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8000f74:	fa93 f3a3 	rbit	r3, r3
 8000f78:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8000f7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d102      	bne.n	8000f9a <HAL_RCC_OscConfig+0x386>
 8000f94:	4b93      	ldr	r3, [pc, #588]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	e013      	b.n	8000fc2 <HAL_RCC_OscConfig+0x3ae>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fa0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8000fa4:	fa93 f3a3 	rbit	r3, r3
 8000fa8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000fac:	2302      	movs	r3, #2
 8000fae:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000fb2:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000fbe:	4b89      	ldr	r3, [pc, #548]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8000fc8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000fcc:	fa92 f2a2 	rbit	r2, r2
 8000fd0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8000fd4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000fd8:	fab2 f282 	clz	r2, r2
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	f042 0220 	orr.w	r2, r2, #32
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	f002 021f 	and.w	r2, r2, #31
 8000fe8:	2101      	movs	r1, #1
 8000fea:	fa01 f202 	lsl.w	r2, r1, r2
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <HAL_RCC_OscConfig+0x3f6>
 8000ff4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000ff8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d002      	beq.n	800100a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	f000 be52 	b.w	8001cae <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100a:	4b76      	ldr	r3, [pc, #472]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001016:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	691b      	ldr	r3, [r3, #16]
 800101e:	21f8      	movs	r1, #248	@ 0xf8
 8001020:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001024:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001028:	fa91 f1a1 	rbit	r1, r1
 800102c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001030:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001034:	fab1 f181 	clz	r1, r1
 8001038:	b2c9      	uxtb	r1, r1
 800103a:	408b      	lsls	r3, r1
 800103c:	4969      	ldr	r1, [pc, #420]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 800103e:	4313      	orrs	r3, r2
 8001040:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001042:	e0fe      	b.n	8001242 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001048:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 8088 	beq.w	8001166 <HAL_RCC_OscConfig+0x552>
 8001056:	2301      	movs	r3, #1
 8001058:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001060:	fa93 f3a3 	rbit	r3, r3
 8001064:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001068:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800106c:	fab3 f383 	clz	r3, r3
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001076:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	461a      	mov	r2, r3
 800107e:	2301      	movs	r3, #1
 8001080:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001082:	f7ff fad1 	bl	8000628 <HAL_GetTick>
 8001086:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108a:	e00a      	b.n	80010a2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff facc 	bl	8000628 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d902      	bls.n	80010a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	f000 be06 	b.w	8001cae <HAL_RCC_OscConfig+0x109a>
 80010a2:	2302      	movs	r3, #2
 80010a4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80010ac:	fa93 f3a3 	rbit	r3, r3
 80010b0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80010b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	fab3 f383 	clz	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	095b      	lsrs	r3, r3, #5
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <HAL_RCC_OscConfig+0x4be>
 80010cc:	4b45      	ldr	r3, [pc, #276]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	e013      	b.n	80010fa <HAL_RCC_OscConfig+0x4e6>
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80010e4:	2302      	movs	r3, #2
 80010e6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80010ea:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80010f6:	4b3b      	ldr	r3, [pc, #236]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 80010f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fa:	2202      	movs	r2, #2
 80010fc:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001100:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001104:	fa92 f2a2 	rbit	r2, r2
 8001108:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800110c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001110:	fab2 f282 	clz	r2, r2
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	f042 0220 	orr.w	r2, r2, #32
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	f002 021f 	and.w	r2, r2, #31
 8001120:	2101      	movs	r1, #1
 8001122:	fa01 f202 	lsl.w	r2, r1, r2
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0af      	beq.n	800108c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b2d      	ldr	r3, [pc, #180]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001138:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	21f8      	movs	r1, #248	@ 0xf8
 8001142:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001146:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800114a:	fa91 f1a1 	rbit	r1, r1
 800114e:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001152:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001156:	fab1 f181 	clz	r1, r1
 800115a:	b2c9      	uxtb	r1, r1
 800115c:	408b      	lsls	r3, r1
 800115e:	4921      	ldr	r1, [pc, #132]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
 8001164:	e06d      	b.n	8001242 <HAL_RCC_OscConfig+0x62e>
 8001166:	2301      	movs	r3, #1
 8001168:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001178:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800117c:	fab3 f383 	clz	r3, r3
 8001180:	b2db      	uxtb	r3, r3
 8001182:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001186:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	461a      	mov	r2, r3
 800118e:	2300      	movs	r3, #0
 8001190:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001192:	f7ff fa49 	bl	8000628 <HAL_GetTick>
 8001196:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800119a:	e00a      	b.n	80011b2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fa44 	bl	8000628 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d902      	bls.n	80011b2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f000 bd7e 	b.w	8001cae <HAL_RCC_OscConfig+0x109a>
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80011c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c8:	fab3 f383 	clz	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d105      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5d4>
 80011dc:	4b01      	ldr	r3, [pc, #4]	@ (80011e4 <HAL_RCC_OscConfig+0x5d0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	e016      	b.n	8001210 <HAL_RCC_OscConfig+0x5fc>
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001200:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800120c:	4bbf      	ldr	r3, [pc, #764]	@ (800150c <HAL_RCC_OscConfig+0x8f8>)
 800120e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001210:	2202      	movs	r2, #2
 8001212:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001216:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800121a:	fa92 f2a2 	rbit	r2, r2
 800121e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001222:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001226:	fab2 f282 	clz	r2, r2
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	f042 0220 	orr.w	r2, r2, #32
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	f002 021f 	and.w	r2, r2, #31
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f202 	lsl.w	r2, r1, r2
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1ac      	bne.n	800119c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001246:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8113 	beq.w	800147e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800125c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d07c      	beq.n	8001362 <HAL_RCC_OscConfig+0x74e>
 8001268:	2301      	movs	r3, #1
 800126a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001272:	fa93 f3a3 	rbit	r3, r3
 8001276:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800127a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461a      	mov	r2, r3
 8001286:	4ba2      	ldr	r3, [pc, #648]	@ (8001510 <HAL_RCC_OscConfig+0x8fc>)
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	461a      	mov	r2, r3
 800128e:	2301      	movs	r3, #1
 8001290:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff f9c9 	bl	8000628 <HAL_GetTick>
 8001296:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129c:	f7ff f9c4 	bl	8000628 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d902      	bls.n	80012b2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	f000 bcfe 	b.w	8001cae <HAL_RCC_OscConfig+0x109a>
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012bc:	fa93 f2a3 	rbit	r2, r3
 80012c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012d2:	2202      	movs	r2, #2
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	fa93 f2a3 	rbit	r2, r3
 80012e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012f6:	2202      	movs	r2, #2
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	fa93 f2a3 	rbit	r2, r3
 8001308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800130c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001310:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4b7e      	ldr	r3, [pc, #504]	@ (800150c <HAL_RCC_OscConfig+0x8f8>)
 8001314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001316:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800131a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800131e:	2102      	movs	r1, #2
 8001320:	6019      	str	r1, [r3, #0]
 8001322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001326:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	fa93 f1a3 	rbit	r1, r3
 8001330:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001334:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001338:	6019      	str	r1, [r3, #0]
  return result;
 800133a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800133e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800134e:	b2db      	uxtb	r3, r3
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	2101      	movs	r1, #1
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	4013      	ands	r3, r2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d09d      	beq.n	800129c <HAL_RCC_OscConfig+0x688>
 8001360:	e08d      	b.n	800147e <HAL_RCC_OscConfig+0x86a>
 8001362:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001366:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001372:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	fa93 f2a3 	rbit	r2, r3
 800137c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001380:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001384:	601a      	str	r2, [r3, #0]
  return result;
 8001386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800138a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800138e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	fab3 f383 	clz	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <HAL_RCC_OscConfig+0x8fc>)
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	461a      	mov	r2, r3
 80013a0:	2300      	movs	r3, #0
 80013a2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a4:	f7ff f940 	bl	8000628 <HAL_GetTick>
 80013a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	e00a      	b.n	80013c4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ae:	f7ff f93b 	bl	8000628 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d902      	bls.n	80013c4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	f000 bc75 	b.w	8001cae <HAL_RCC_OscConfig+0x109a>
 80013c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013cc:	2202      	movs	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	fa93 f2a3 	rbit	r2, r3
 80013de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013e2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013f0:	2202      	movs	r2, #2
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001406:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001410:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001414:	2202      	movs	r2, #2
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800141c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	fa93 f2a3 	rbit	r2, r3
 8001426:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800142a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800142e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	4b36      	ldr	r3, [pc, #216]	@ (800150c <HAL_RCC_OscConfig+0x8f8>)
 8001432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001434:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001438:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800143c:	2102      	movs	r1, #2
 800143e:	6019      	str	r1, [r3, #0]
 8001440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001444:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f1a3 	rbit	r1, r3
 800144e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001452:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001456:	6019      	str	r1, [r3, #0]
  return result;
 8001458:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800145c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d197      	bne.n	80013ae <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001482:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 81a5 	beq.w	80017de <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <HAL_RCC_OscConfig+0x8f8>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d116      	bne.n	80014d4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_RCC_OscConfig+0x8f8>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a18      	ldr	r2, [pc, #96]	@ (800150c <HAL_RCC_OscConfig+0x8f8>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b16      	ldr	r3, [pc, #88]	@ (800150c <HAL_RCC_OscConfig+0x8f8>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80014ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014cc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014ce:	2301      	movs	r3, #1
 80014d0:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <HAL_RCC_OscConfig+0x900>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d121      	bne.n	8001524 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <HAL_RCC_OscConfig+0x900>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <HAL_RCC_OscConfig+0x900>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ec:	f7ff f89c 	bl	8000628 <HAL_GetTick>
 80014f0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	e010      	b.n	8001518 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff f897 	bl	8000628 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b64      	cmp	r3, #100	@ 0x64
 8001504:	d908      	bls.n	8001518 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e3d1      	b.n	8001cae <HAL_RCC_OscConfig+0x109a>
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	10908120 	.word	0x10908120
 8001514:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b8d      	ldr	r3, [pc, #564]	@ (8001750 <HAL_RCC_OscConfig+0xb3c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0e8      	beq.n	80014f6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001528:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d106      	bne.n	8001542 <HAL_RCC_OscConfig+0x92e>
 8001534:	4b87      	ldr	r3, [pc, #540]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a86      	ldr	r2, [pc, #536]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6213      	str	r3, [r2, #32]
 8001540:	e035      	b.n	80015ae <HAL_RCC_OscConfig+0x99a>
 8001542:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001546:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x958>
 8001552:	4b80      	ldr	r3, [pc, #512]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a7f      	ldr	r2, [pc, #508]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6213      	str	r3, [r2, #32]
 800155e:	4b7d      	ldr	r3, [pc, #500]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a7c      	ldr	r2, [pc, #496]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	6213      	str	r3, [r2, #32]
 800156a:	e020      	b.n	80015ae <HAL_RCC_OscConfig+0x99a>
 800156c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001570:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d10c      	bne.n	8001596 <HAL_RCC_OscConfig+0x982>
 800157c:	4b75      	ldr	r3, [pc, #468]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4a74      	ldr	r2, [pc, #464]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	6213      	str	r3, [r2, #32]
 8001588:	4b72      	ldr	r3, [pc, #456]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4a71      	ldr	r2, [pc, #452]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	e00b      	b.n	80015ae <HAL_RCC_OscConfig+0x99a>
 8001596:	4b6f      	ldr	r3, [pc, #444]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a6e      	ldr	r2, [pc, #440]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6213      	str	r3, [r2, #32]
 80015a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	4a6b      	ldr	r2, [pc, #428]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 80015a8:	f023 0304 	bic.w	r3, r3, #4
 80015ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8081 	beq.w	80016c2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff f832 	bl	8000628 <HAL_GetTick>
 80015c4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ca:	f7ff f82d 	bl	8000628 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e365      	b.n	8001cae <HAL_RCC_OscConfig+0x109a>
 80015e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015ea:	2202      	movs	r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	fa93 f2a3 	rbit	r2, r3
 80015fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001600:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800160a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800160e:	2202      	movs	r2, #2
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001616:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fa93 f2a3 	rbit	r2, r3
 8001620:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001624:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001628:	601a      	str	r2, [r3, #0]
  return result;
 800162a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800162e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001632:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001634:	fab3 f383 	clz	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0xa3a>
 8001648:	4b42      	ldr	r3, [pc, #264]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	e013      	b.n	8001676 <HAL_RCC_OscConfig+0xa62>
 800164e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001652:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001656:	2202      	movs	r2, #2
 8001658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	fa93 f2a3 	rbit	r2, r3
 8001668:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800166c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	4b38      	ldr	r3, [pc, #224]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800167a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800167e:	2102      	movs	r1, #2
 8001680:	6011      	str	r1, [r2, #0]
 8001682:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001686:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	fa92 f1a2 	rbit	r1, r2
 8001690:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001694:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001698:	6011      	str	r1, [r2, #0]
  return result;
 800169a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800169e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	fab2 f282 	clz	r2, r2
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f002 021f 	and.w	r2, r2, #31
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d084      	beq.n	80015ca <HAL_RCC_OscConfig+0x9b6>
 80016c0:	e083      	b.n	80017ca <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c2:	f7fe ffb1 	bl	8000628 <HAL_GetTick>
 80016c6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016cc:	f7fe ffac 	bl	8000628 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e2e4      	b.n	8001cae <HAL_RCC_OscConfig+0x109a>
 80016e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016ec:	2202      	movs	r2, #2
 80016ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016f4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001702:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800170c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001710:	2202      	movs	r2, #2
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001718:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	fa93 f2a3 	rbit	r2, r3
 8001722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001726:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800172a:	601a      	str	r2, [r3, #0]
  return result;
 800172c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001730:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001734:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001736:	fab3 f383 	clz	r3, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	b2db      	uxtb	r3, r3
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d106      	bne.n	8001758 <HAL_RCC_OscConfig+0xb44>
 800174a:	4b02      	ldr	r3, [pc, #8]	@ (8001754 <HAL_RCC_OscConfig+0xb40>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	e017      	b.n	8001780 <HAL_RCC_OscConfig+0xb6c>
 8001750:	40007000 	.word	0x40007000
 8001754:	40021000 	.word	0x40021000
 8001758:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800175c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001760:	2202      	movs	r2, #2
 8001762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001768:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	fa93 f2a3 	rbit	r2, r3
 8001772:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001776:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	4bb3      	ldr	r3, [pc, #716]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001784:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001788:	2102      	movs	r1, #2
 800178a:	6011      	str	r1, [r2, #0]
 800178c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001790:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	fa92 f1a2 	rbit	r1, r2
 800179a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800179e:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80017a2:	6011      	str	r1, [r2, #0]
  return result;
 80017a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80017a8:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	fab2 f282 	clz	r2, r2
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	f002 021f 	and.w	r2, r2, #31
 80017be:	2101      	movs	r1, #1
 80017c0:	fa01 f202 	lsl.w	r2, r1, r2
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d180      	bne.n	80016cc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017ca:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d105      	bne.n	80017de <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d2:	4b9e      	ldr	r3, [pc, #632]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a9d      	ldr	r2, [pc, #628]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 80017d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 825e 	beq.w	8001cac <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f0:	4b96      	ldr	r3, [pc, #600]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	f000 821f 	beq.w	8001c3c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001802:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	2b02      	cmp	r3, #2
 800180c:	f040 8170 	bne.w	8001af0 <HAL_RCC_OscConfig+0xedc>
 8001810:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001814:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001818:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800181c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001822:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	fa93 f2a3 	rbit	r2, r3
 800182c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001830:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001834:	601a      	str	r2, [r3, #0]
  return result;
 8001836:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800183a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800183e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	fab3 f383 	clz	r3, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800184a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	461a      	mov	r2, r3
 8001852:	2300      	movs	r3, #0
 8001854:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7fe fee7 	bl	8000628 <HAL_GetTick>
 800185a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	e009      	b.n	8001874 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7fe fee2 	bl	8000628 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e21c      	b.n	8001cae <HAL_RCC_OscConfig+0x109a>
 8001874:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001878:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800187c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001882:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001886:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	fa93 f2a3 	rbit	r2, r3
 8001890:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001894:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001898:	601a      	str	r2, [r3, #0]
  return result;
 800189a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800189e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80018a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d102      	bne.n	80018be <HAL_RCC_OscConfig+0xcaa>
 80018b8:	4b64      	ldr	r3, [pc, #400]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	e027      	b.n	800190e <HAL_RCC_OscConfig+0xcfa>
 80018be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018c2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018d0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	fa93 f2a3 	rbit	r2, r3
 80018da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018de:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018e8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80018ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018f6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	fa93 f2a3 	rbit	r2, r3
 8001900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001904:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	4b50      	ldr	r3, [pc, #320]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001912:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001916:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800191a:	6011      	str	r1, [r2, #0]
 800191c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001920:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	fa92 f1a2 	rbit	r1, r2
 800192a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800192e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001932:	6011      	str	r1, [r2, #0]
  return result;
 8001934:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001938:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	fab2 f282 	clz	r2, r2
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	f042 0220 	orr.w	r2, r2, #32
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	f002 021f 	and.w	r2, r2, #31
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d182      	bne.n	8001860 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 800195c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195e:	f023 020f 	bic.w	r2, r3, #15
 8001962:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001966:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	4937      	ldr	r1, [pc, #220]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 8001970:	4313      	orrs	r3, r2
 8001972:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001974:	4b35      	ldr	r3, [pc, #212]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800197c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001980:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6a19      	ldr	r1, [r3, #32]
 8001988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800198c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	430b      	orrs	r3, r1
 8001996:	492d      	ldr	r1, [pc, #180]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
 800199c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019a0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80019a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ae:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	fa93 f2a3 	rbit	r2, r3
 80019b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019c0:	601a      	str	r2, [r3, #0]
  return result;
 80019c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	461a      	mov	r2, r3
 80019de:	2301      	movs	r3, #1
 80019e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7fe fe21 	bl	8000628 <HAL_GetTick>
 80019e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ea:	e009      	b.n	8001a00 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ec:	f7fe fe1c 	bl	8000628 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e156      	b.n	8001cae <HAL_RCC_OscConfig+0x109a>
 8001a00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a04:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a12:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	fa93 f2a3 	rbit	r2, r3
 8001a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a20:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a24:	601a      	str	r2, [r3, #0]
  return result;
 8001a26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a2a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001a2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_RCC_OscConfig+0xe3c>
 8001a44:	4b01      	ldr	r3, [pc, #4]	@ (8001a4c <HAL_RCC_OscConfig+0xe38>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	e02a      	b.n	8001aa0 <HAL_RCC_OscConfig+0xe8c>
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a54:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a62:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a70:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a88:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	fa93 f2a3 	rbit	r2, r3
 8001a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a96:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	4b86      	ldr	r3, [pc, #536]	@ (8001cb8 <HAL_RCC_OscConfig+0x10a4>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aa4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001aa8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001aac:	6011      	str	r1, [r2, #0]
 8001aae:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ab2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	fa92 f1a2 	rbit	r1, r2
 8001abc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ac0:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001ac4:	6011      	str	r1, [r2, #0]
  return result;
 8001ac6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001aca:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	fab2 f282 	clz	r2, r2
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f042 0220 	orr.w	r2, r2, #32
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	f002 021f 	and.w	r2, r2, #31
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f43f af7f 	beq.w	80019ec <HAL_RCC_OscConfig+0xdd8>
 8001aee:	e0dd      	b.n	8001cac <HAL_RCC_OscConfig+0x1098>
 8001af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001af8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b02:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	fa93 f2a3 	rbit	r2, r3
 8001b0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b10:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b14:	601a      	str	r2, [r3, #0]
  return result;
 8001b16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001b1e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b2a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	461a      	mov	r2, r3
 8001b32:	2300      	movs	r3, #0
 8001b34:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7fe fd77 	bl	8000628 <HAL_GetTick>
 8001b3a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	e009      	b.n	8001b54 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b40:	f7fe fd72 	bl	8000628 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e0ac      	b.n	8001cae <HAL_RCC_OscConfig+0x109a>
 8001b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b58:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b66:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	fa93 f2a3 	rbit	r2, r3
 8001b70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b74:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b78:	601a      	str	r2, [r3, #0]
  return result;
 8001b7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b7e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b84:	fab3 f383 	clz	r3, r3
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_OscConfig+0xf8a>
 8001b98:	4b47      	ldr	r3, [pc, #284]	@ (8001cb8 <HAL_RCC_OscConfig+0x10a4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	e027      	b.n	8001bee <HAL_RCC_OscConfig+0xfda>
 8001b9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ba2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ba6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	fa93 f2a3 	rbit	r2, r3
 8001bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bbe:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001bcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bd6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be4:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	4b33      	ldr	r3, [pc, #204]	@ (8001cb8 <HAL_RCC_OscConfig+0x10a4>)
 8001bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001bf2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bf6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001bfa:	6011      	str	r1, [r2, #0]
 8001bfc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c00:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	fa92 f1a2 	rbit	r1, r2
 8001c0a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c0e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c12:	6011      	str	r1, [r2, #0]
  return result;
 8001c14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001c18:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	fab2 f282 	clz	r2, r2
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	f042 0220 	orr.w	r2, r2, #32
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	f002 021f 	and.w	r2, r2, #31
 8001c2e:	2101      	movs	r1, #1
 8001c30:	fa01 f202 	lsl.w	r2, r1, r2
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d182      	bne.n	8001b40 <HAL_RCC_OscConfig+0xf2c>
 8001c3a:	e037      	b.n	8001cac <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e02e      	b.n	8001cae <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c50:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_RCC_OscConfig+0x10a4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001c58:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <HAL_RCC_OscConfig+0x10a4>)
 8001c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5c:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c60:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001c64:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d117      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001c78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001c7c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001c90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c94:	f003 020f 	and.w	r2, r3, #15
 8001c98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000

08001cbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b09e      	sub	sp, #120	@ 0x78
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e162      	b.n	8001f9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b90      	ldr	r3, [pc, #576]	@ (8001f18 <HAL_RCC_ClockConfig+0x25c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d910      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8001f18 <HAL_RCC_ClockConfig+0x25c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	498b      	ldr	r1, [pc, #556]	@ (8001f18 <HAL_RCC_ClockConfig+0x25c>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b89      	ldr	r3, [pc, #548]	@ (8001f18 <HAL_RCC_ClockConfig+0x25c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e14a      	b.n	8001f9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b82      	ldr	r3, [pc, #520]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	497f      	ldr	r1, [pc, #508]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80dc 	beq.w	8001ee8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d13c      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xf6>
 8001d38:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d3c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d102      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xa6>
 8001d5c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	e00f      	b.n	8001d82 <HAL_RCC_ClockConfig+0xc6>
 8001d62:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d74:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d7e:	4b67      	ldr	r3, [pc, #412]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d86:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001d88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001d8a:	fa92 f2a2 	rbit	r2, r2
 8001d8e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001d90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f042 0220 	orr.w	r2, r2, #32
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f002 021f 	and.w	r2, r2, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d17b      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e0f3      	b.n	8001f9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d13c      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x178>
 8001dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dbe:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x128>
 8001dde:	4b4f      	ldr	r3, [pc, #316]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e00f      	b.n	8001e04 <HAL_RCC_ClockConfig+0x148>
 8001de4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001de8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001dec:	fa93 f3a3 	rbit	r3, r3
 8001df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001df2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001df6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001df8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e00:	4b46      	ldr	r3, [pc, #280]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e08:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001e0c:	fa92 f2a2 	rbit	r2, r2
 8001e10:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001e12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e14:	fab2 f282 	clz	r2, r2
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f042 0220 	orr.w	r2, r2, #32
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f002 021f 	and.w	r2, r2, #31
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d13a      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0b2      	b.n	8001f9a <HAL_RCC_ClockConfig+0x2de>
 8001e34:	2302      	movs	r3, #2
 8001e36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e3a:	fa93 f3a3 	rbit	r3, r3
 8001e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d102      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x1a0>
 8001e56:	4b31      	ldr	r3, [pc, #196]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	e00d      	b.n	8001e78 <HAL_RCC_ClockConfig+0x1bc>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	4b29      	ldr	r3, [pc, #164]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	2202      	movs	r2, #2
 8001e7a:	61ba      	str	r2, [r7, #24]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	fa92 f2a2 	rbit	r2, r2
 8001e82:	617a      	str	r2, [r7, #20]
  return result;
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	fab2 f282 	clz	r2, r2
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f042 0220 	orr.w	r2, r2, #32
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f002 021f 	and.w	r2, r2, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e079      	b.n	8001f9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	491a      	ldr	r1, [pc, #104]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fbb6 	bl	8000628 <HAL_GetTick>
 8001ebc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7fe fbb2 	bl	8000628 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e061      	b.n	8001f9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b11      	ldr	r3, [pc, #68]	@ (8001f1c <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_ClockConfig+0x25c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d214      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <HAL_RCC_ClockConfig+0x25c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4906      	ldr	r1, [pc, #24]	@ (8001f18 <HAL_RCC_ClockConfig+0x25c>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <HAL_RCC_ClockConfig+0x25c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e040      	b.n	8001f9a <HAL_RCC_ClockConfig+0x2de>
 8001f18:	40022000 	.word	0x40022000
 8001f1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	491a      	ldr	r1, [pc, #104]	@ (8001fa4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4a:	4b16      	ldr	r3, [pc, #88]	@ (8001fa4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4912      	ldr	r1, [pc, #72]	@ (8001fa4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f5e:	f000 f829 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f62:	4601      	mov	r1, r0
 8001f64:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <HAL_RCC_ClockConfig+0x2e8>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f6c:	22f0      	movs	r2, #240	@ 0xf0
 8001f6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	fa92 f2a2 	rbit	r2, r2
 8001f76:	60fa      	str	r2, [r7, #12]
  return result;
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	fab2 f282 	clz	r2, r2
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	40d3      	lsrs	r3, r2
 8001f82:	4a09      	ldr	r2, [pc, #36]	@ (8001fa8 <HAL_RCC_ClockConfig+0x2ec>)
 8001f84:	5cd3      	ldrb	r3, [r2, r3]
 8001f86:	fa21 f303 	lsr.w	r3, r1, r3
 8001f8a:	4a08      	ldr	r2, [pc, #32]	@ (8001fac <HAL_RCC_ClockConfig+0x2f0>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <HAL_RCC_ClockConfig+0x2f4>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fb04 	bl	80005a0 <HAL_InitTick>
  
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3778      	adds	r7, #120	@ 0x78
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08002758 	.word	0x08002758
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	2000000c 	.word	0x2000000c

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001fce:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d002      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x30>
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x36>
 8001fe2:	e029      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fe6:	613b      	str	r3, [r7, #16]
      break;
 8001fe8:	e029      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	0c9b      	lsrs	r3, r3, #18
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	4a18      	ldr	r2, [pc, #96]	@ (8002054 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ff4:	5cd3      	ldrb	r3, [r2, r3]
 8001ff6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	4a15      	ldr	r2, [pc, #84]	@ (8002058 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002010:	4a0f      	ldr	r2, [pc, #60]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	fbb2 f2f3 	udiv	r2, r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e007      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002022:	4a0b      	ldr	r2, [pc, #44]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	fbb2 f2f3 	udiv	r2, r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	fb02 f303 	mul.w	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	613b      	str	r3, [r7, #16]
      break;
 8002036:	e002      	b.n	800203e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x9c>)
 800203a:	613b      	str	r3, [r7, #16]
      break;
 800203c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800203e:	693b      	ldr	r3, [r7, #16]
}
 8002040:	4618      	mov	r0, r3
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40021000 	.word	0x40021000
 8002050:	007a1200 	.word	0x007a1200
 8002054:	08002768 	.word	0x08002768
 8002058:	08002778 	.word	0x08002778

0800205c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e049      	b.n	8002102 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe f9da 	bl	800043c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3304      	adds	r3, #4
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f000 f9d0 	bl	8002440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	d001      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e04f      	b.n	80021c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a23      	ldr	r2, [pc, #140]	@ (80021d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01d      	beq.n	8002182 <HAL_TIM_Base_Start_IT+0x76>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214e:	d018      	beq.n	8002182 <HAL_TIM_Base_Start_IT+0x76>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1f      	ldr	r2, [pc, #124]	@ (80021d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_TIM_Base_Start_IT+0x76>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1e      	ldr	r2, [pc, #120]	@ (80021d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_TIM_Base_Start_IT+0x76>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <HAL_TIM_Base_Start_IT+0xd0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_TIM_Base_Start_IT+0x76>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_TIM_Base_Start_IT+0x76>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d115      	bne.n	80021ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	4b17      	ldr	r3, [pc, #92]	@ (80021e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800218a:	4013      	ands	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b06      	cmp	r3, #6
 8002192:	d015      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0xb4>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800219a:	d011      	beq.n	80021c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ac:	e008      	b.n	80021c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e000      	b.n	80021c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40012c00 	.word	0x40012c00
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800
 80021dc:	40013400 	.word	0x40013400
 80021e0:	40014000 	.word	0x40014000
 80021e4:	40015000 	.word	0x40015000
 80021e8:	00010007 	.word	0x00010007

080021ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d020      	beq.n	8002250 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01b      	beq.n	8002250 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0202 	mvn.w	r2, #2
 8002220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f8e4 	bl	8002404 <HAL_TIM_IC_CaptureCallback>
 800223c:	e005      	b.n	800224a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f8d6 	bl	80023f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f8e7 	bl	8002418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d020      	beq.n	800229c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d01b      	beq.n	800229c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0204 	mvn.w	r2, #4
 800226c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8be 	bl	8002404 <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f8b0 	bl	80023f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f8c1 	bl	8002418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d020      	beq.n	80022e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01b      	beq.n	80022e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0208 	mvn.w	r2, #8
 80022b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2204      	movs	r2, #4
 80022be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f898 	bl	8002404 <HAL_TIM_IC_CaptureCallback>
 80022d4:	e005      	b.n	80022e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f88a 	bl	80023f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f89b 	bl	8002418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d020      	beq.n	8002334 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01b      	beq.n	8002334 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0210 	mvn.w	r2, #16
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2208      	movs	r2, #8
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f872 	bl	8002404 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f864 	bl	80023f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f875 	bl	8002418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00c      	beq.n	8002358 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0201 	mvn.w	r2, #1
 8002350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe f836 	bl	80003c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00c      	beq.n	800237c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f9a2 	bl	80026c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00c      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238c:	2b00      	cmp	r3, #0
 800238e:	d007      	beq.n	80023a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f99a 	bl	80026d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00c      	beq.n	80023c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80023bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f834 	bl	800242c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00c      	beq.n	80023e8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 0320 	and.w	r3, r3, #32
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0220 	mvn.w	r2, #32
 80023e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f962 	bl	80026ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a48      	ldr	r2, [pc, #288]	@ (8002574 <TIM_Base_SetConfig+0x134>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d013      	beq.n	8002480 <TIM_Base_SetConfig+0x40>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800245e:	d00f      	beq.n	8002480 <TIM_Base_SetConfig+0x40>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a45      	ldr	r2, [pc, #276]	@ (8002578 <TIM_Base_SetConfig+0x138>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00b      	beq.n	8002480 <TIM_Base_SetConfig+0x40>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a44      	ldr	r2, [pc, #272]	@ (800257c <TIM_Base_SetConfig+0x13c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d007      	beq.n	8002480 <TIM_Base_SetConfig+0x40>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a43      	ldr	r2, [pc, #268]	@ (8002580 <TIM_Base_SetConfig+0x140>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d003      	beq.n	8002480 <TIM_Base_SetConfig+0x40>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a42      	ldr	r2, [pc, #264]	@ (8002584 <TIM_Base_SetConfig+0x144>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d108      	bne.n	8002492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a37      	ldr	r2, [pc, #220]	@ (8002574 <TIM_Base_SetConfig+0x134>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01f      	beq.n	80024da <TIM_Base_SetConfig+0x9a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024a0:	d01b      	beq.n	80024da <TIM_Base_SetConfig+0x9a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a34      	ldr	r2, [pc, #208]	@ (8002578 <TIM_Base_SetConfig+0x138>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d017      	beq.n	80024da <TIM_Base_SetConfig+0x9a>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a33      	ldr	r2, [pc, #204]	@ (800257c <TIM_Base_SetConfig+0x13c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <TIM_Base_SetConfig+0x9a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a32      	ldr	r2, [pc, #200]	@ (8002580 <TIM_Base_SetConfig+0x140>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00f      	beq.n	80024da <TIM_Base_SetConfig+0x9a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a32      	ldr	r2, [pc, #200]	@ (8002588 <TIM_Base_SetConfig+0x148>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00b      	beq.n	80024da <TIM_Base_SetConfig+0x9a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a31      	ldr	r2, [pc, #196]	@ (800258c <TIM_Base_SetConfig+0x14c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <TIM_Base_SetConfig+0x9a>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a30      	ldr	r2, [pc, #192]	@ (8002590 <TIM_Base_SetConfig+0x150>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d003      	beq.n	80024da <TIM_Base_SetConfig+0x9a>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002584 <TIM_Base_SetConfig+0x144>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d108      	bne.n	80024ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a18      	ldr	r2, [pc, #96]	@ (8002574 <TIM_Base_SetConfig+0x134>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d013      	beq.n	8002540 <TIM_Base_SetConfig+0x100>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a19      	ldr	r2, [pc, #100]	@ (8002580 <TIM_Base_SetConfig+0x140>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00f      	beq.n	8002540 <TIM_Base_SetConfig+0x100>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a19      	ldr	r2, [pc, #100]	@ (8002588 <TIM_Base_SetConfig+0x148>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00b      	beq.n	8002540 <TIM_Base_SetConfig+0x100>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a18      	ldr	r2, [pc, #96]	@ (800258c <TIM_Base_SetConfig+0x14c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d007      	beq.n	8002540 <TIM_Base_SetConfig+0x100>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <TIM_Base_SetConfig+0x150>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d003      	beq.n	8002540 <TIM_Base_SetConfig+0x100>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a12      	ldr	r2, [pc, #72]	@ (8002584 <TIM_Base_SetConfig+0x144>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d103      	bne.n	8002548 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d105      	bne.n	8002566 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f023 0201 	bic.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	611a      	str	r2, [r3, #16]
  }
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40000400 	.word	0x40000400
 800257c:	40000800 	.word	0x40000800
 8002580:	40013400 	.word	0x40013400
 8002584:	40015000 	.word	0x40015000
 8002588:	40014000 	.word	0x40014000
 800258c:	40014400 	.word	0x40014400
 8002590:	40014800 	.word	0x40014800

08002594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e06d      	b.n	8002688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2202      	movs	r2, #2
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a30      	ldr	r2, [pc, #192]	@ (8002694 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2f      	ldr	r2, [pc, #188]	@ (8002698 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d004      	beq.n	80025ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2d      	ldr	r2, [pc, #180]	@ (800269c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80025f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	4313      	orrs	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1e      	ldr	r2, [pc, #120]	@ (8002694 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d01d      	beq.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002628:	d018      	beq.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1c      	ldr	r2, [pc, #112]	@ (80026a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d013      	beq.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1a      	ldr	r2, [pc, #104]	@ (80026a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d00e      	beq.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a15      	ldr	r2, [pc, #84]	@ (8002698 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d009      	beq.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a16      	ldr	r2, [pc, #88]	@ (80026a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d004      	beq.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a11      	ldr	r2, [pc, #68]	@ (800269c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d10c      	bne.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002662:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	4313      	orrs	r3, r2
 800266c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40012c00 	.word	0x40012c00
 8002698:	40013400 	.word	0x40013400
 800269c:	40015000 	.word	0x40015000
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800
 80026a8:	40014000 	.word	0x40014000

080026ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <memset>:
 80026e8:	4402      	add	r2, r0
 80026ea:	4603      	mov	r3, r0
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d100      	bne.n	80026f2 <memset+0xa>
 80026f0:	4770      	bx	lr
 80026f2:	f803 1b01 	strb.w	r1, [r3], #1
 80026f6:	e7f9      	b.n	80026ec <memset+0x4>

080026f8 <__libc_init_array>:
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002730 <__libc_init_array+0x38>)
 80026fc:	4c0d      	ldr	r4, [pc, #52]	@ (8002734 <__libc_init_array+0x3c>)
 80026fe:	1b64      	subs	r4, r4, r5
 8002700:	10a4      	asrs	r4, r4, #2
 8002702:	2600      	movs	r6, #0
 8002704:	42a6      	cmp	r6, r4
 8002706:	d109      	bne.n	800271c <__libc_init_array+0x24>
 8002708:	4d0b      	ldr	r5, [pc, #44]	@ (8002738 <__libc_init_array+0x40>)
 800270a:	4c0c      	ldr	r4, [pc, #48]	@ (800273c <__libc_init_array+0x44>)
 800270c:	f000 f818 	bl	8002740 <_init>
 8002710:	1b64      	subs	r4, r4, r5
 8002712:	10a4      	asrs	r4, r4, #2
 8002714:	2600      	movs	r6, #0
 8002716:	42a6      	cmp	r6, r4
 8002718:	d105      	bne.n	8002726 <__libc_init_array+0x2e>
 800271a:	bd70      	pop	{r4, r5, r6, pc}
 800271c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002720:	4798      	blx	r3
 8002722:	3601      	adds	r6, #1
 8002724:	e7ee      	b.n	8002704 <__libc_init_array+0xc>
 8002726:	f855 3b04 	ldr.w	r3, [r5], #4
 800272a:	4798      	blx	r3
 800272c:	3601      	adds	r6, #1
 800272e:	e7f2      	b.n	8002716 <__libc_init_array+0x1e>
 8002730:	08002788 	.word	0x08002788
 8002734:	08002788 	.word	0x08002788
 8002738:	08002788 	.word	0x08002788
 800273c:	0800278c 	.word	0x0800278c

08002740 <_init>:
 8002740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002742:	bf00      	nop
 8002744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002746:	bc08      	pop	{r3}
 8002748:	469e      	mov	lr, r3
 800274a:	4770      	bx	lr

0800274c <_fini>:
 800274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274e:	bf00      	nop
 8002750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002752:	bc08      	pop	{r3}
 8002754:	469e      	mov	lr, r3
 8002756:	4770      	bx	lr
